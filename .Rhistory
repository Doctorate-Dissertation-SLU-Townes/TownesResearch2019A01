AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
var(Sample90to95C$GYEAR)
var(Sample90to95C$as.factor(CAT))
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
var(Sample90to95C$GYEAR)
var(Sample90to95C$CAT02)
var(Sample90to95C$CAT03)
var(Sample90to95C$CAT04)
var(Sample90to95C$CAT05)
var(Sample90to95C$CAT06)
var(Sample90to95C$CLAIMS)
var(Sample90to95C$CMADE)
var(Sample90to95C$GENERAL)
var(Sample90to95C$ORIGINAL)
var(Sample90to95C$FWDAPLAG)
var(Sample90to95C$BCKTGTLAG)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
var(Sample90to95C$GYEAR)
var(Sample90to95C$CAT02)
var(Sample90to95C$CAT03)
var(Sample90to95C$CAT04)
var(Sample90to95C$CAT05)
var(Sample90to95C$CAT06)
var(Sample90to95C$CLAIMS)
var(Sample90to95C$CMADE)
var(Sample90to95C$GENERAL)
var(Sample90to95C$ORIGINAL)
var(Sample90to95C$FWDAPLAG)
var(Sample90to95C$BCKGTLAG)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
print(VIFregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
print("GYEAR variability" = var(Sample90to95C$GYEAR))
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
sprintf("GYEAR variability: ",var(Sample90to95C$GYEAR))
var(Sample90to95C$CAT02)
var(Sample90to95C$CAT03)
var(Sample90to95C$CAT04)
var(Sample90to95C$CAT05)
var(Sample90to95C$CAT06)
var(Sample90to95C$CLAIMS)
var(Sample90to95C$CMADE)
var(Sample90to95C$GENERAL)
var(Sample90to95C$ORIGINAL)
var(Sample90to95C$FWDAPLAG)
var(Sample90to95C$BCKGTLAG)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
print(VIFregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
sprintf("GYEAR variability: ",=var(Sample90to95C$GYEAR))
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
png(filename = here("Results","MultRegresQQPlotResiduals01.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegresPlotResiduals.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
# png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
# par(mfrow=c(2,2))
# plot(CRECEIVEregression)
# dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
sprintf("GYEAR variability: ",(var(Sample90to95C$GYEAR)))
var(Sample90to95C$CAT02)
var(Sample90to95C$CAT03)
var(Sample90to95C$CAT04)
var(Sample90to95C$CAT05)
var(Sample90to95C$CAT06)
var(Sample90to95C$CLAIMS)
var(Sample90to95C$CMADE)
var(Sample90to95C$GENERAL)
var(Sample90to95C$ORIGINAL)
var(Sample90to95C$FWDAPLAG)
var(Sample90to95C$BCKGTLAG)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
print(VIFregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# View residuals
png(filename = here("Results","MultRegres01ModelResidualsPlotA.png"))
CRECEIVEresid <- residuals(CRECEIVEregression)
plot(CRECEIVEresid)
dev.off()
ggplot(CRECEIVEregression)+
aes(x=.fitted, y=.resid)+
geom_point()
ggsave(here("Results","MultRegres01ModelResidualsPlotB.png"))
# Check that mean of residuals equals zero
mean(CRECEIVEregression$residuals)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegres01ModelResidualsDistribution.png"))
#par(mfrow=c(2,2))
plot(CRECEIVEregression)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
varGYEAR <- var(Sample90to95C$GYEAR)
print(varGYEAR)
varCAT02 <- var(Sample90to95C$CAT02)
print(varCAT02)
varCAT03 <- var(Sample90to95C$CAT03)
print(varCAT03)
varCAT04 <- var(Sample90to95C$CAT04)
print(varCAT04)
varCAT05 <- var(Sample90to95C$CAT05)
print(varCAT05)
varCAT06 <- var(Sample90to95C$CAT06)
print(varCAT06)
varCLAIMS <- var(Sample90to95C$CLAIMS)
print(varCLAIMS)
varCMADE <- var(Sample90to95C$CMADE)
print(varCMADE)
varGENERAL <- var(Sample90to95C$GENERAL)
print(varGENERAL)
varORIGINAL <- var(Sample90to95C$ORIGINAL)
print(varORIGINAL)
varFWDAPLAG <- var(Sample90to95C$FWDAPLAG)
print(varFWDAPLAG)
varBCKGTLAG <- var(Sample90to95C$BCKGTLAG)
print(varBCKGTLAG)
# Calculate Variance Inflation Factors to check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
print(VIFregression)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pR2(logitCRECEIVE)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pscl::pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
confint(exp(coef(logitCRECEIVE)), level = 0.95)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pscl::pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
exp(confint(coef(logitCRECEIVE)), level = 0.95)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pscl::pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
exp(confint(logitCRECEIVE), level = 0.95)
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for pseudo R2 measures for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemeshow goodness of fit test
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
exp(confint(logitCRECEIVE), level = 0.95)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
exp(confint(logitCRECEIVE, level = 0.95))
# Hosmer-Lemeshow Goodness of Fit Test
HosLemBinomial <- hoslem.test(Sample90to95C$CRECbinary,
fitted(logitCRECEIVE), g=10)
print(HosLemBinomial)
cbind(HosLemBinomial$expected, HosLemBinomial$observed)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
confint(exp(logitCRECEIVE), level = 0.95)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS +
ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG,
data = Sample90to95C, family = binomial,
na.action = na.omit)
summary(logitCRECEIVE)
# Raise e to the coefficients
exp(coef(logitCRECEIVE))
# Obtain various pseudo R-squared measures
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
exp(confint(coef(logitCRECEIVE), level = 0.95))
??count_if
install.packages("expss")
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(expss) # functions for calculating on values
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for pseudo R2 measures for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemeshow goodness of fit test
?? count_if
print(count_if(SELFCTUB>0,Sample90to95))
set.seed(1972)
Sample90to95 <- sample(1:nrow(DataSubset90to95), size = 2000,
replace = TRUE, prob = NULL)
Sample90to95 <- DataSubset90to95[Sample90to95,]
Sample90to95 <- as_tibble(Sample90to95)
print(count_if(SELFCTUB>0,Sample90to95))
print(count_if(Sample90to95$SELFCTUB>0)
print(count_if(SELFCTLB>0,Sample90to95))
print(count_if(Sample90to95$SELFCTUB>0))
print(count_row_if(Sample90to95$SELFCTUB>0))
print(count_row_if(SELFCTUB>0,Sample90to95))
print(count_if(gt(0),Sample90to95$SELFCTUB))
print(count_if(SELFCTLB>0,Sample90to95))
print(count_if(gt(0),Sample90to95$SELFCTUB))
print(count_if(gt(0),Sample90to95$SELFCTLB))
print(count_if(gt(0),Sample90to95$SECDUPBD))
print(count_if(gt(0),Sample90to95$SECDLWBD))
