group_by(CMADE) %>%
summarize(n())
Sample90to95C %>%
group_by(APPYEAR) %>%
summarize(n())
Sample90to95C %>%
group_by(GYEAR) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECEIVE) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECbinary) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECordinal) %>%
summarize(n())
Sample90to95C %>%
group_by(NCLASS) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT01) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT02) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT03) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT04) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT05) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT06) %>%
summarize(n())
Sample90to95C %>%
group_by(SUBCAT) %>%
summarize(n())
Sample90to95C %>%
group_by(CLAIMS) %>%
summarize(n())
Sample90to95C %>%
group_by(CMADE) %>%
summarize(n())
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
confint(logitCRECEIVE)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
#confint(logitCRECEIVE)
wald.test(b=coef(logitCRECEIVE), sigma = vcov(logitCRECEIVE), terms = 2:6)
?? waldtest
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
#confint(logitCRECEIVE)
waldtest(b=coef(logitCRECEIVE), sigma = vcov(logitCRECEIVE), terms = 2:6)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
#confint(logitCRECEIVE)
#waldtest(b=coef(logitCRECEIVE), sigma = vcov(logitCRECEIVE), terms = 2:6)
CRECEIVEordinal <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic", na.acton = na.omit)
CRECEIVEordinal <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECordinal)
CRECEIVEordinal <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECEIVEordinal)
regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "seqrep")
install.packages("leaps")
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "seqrep")
summary(ll,all.best=TRUE, matrix=FALSE)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "seqrep")
summary(CRECregsubsets,all.best=TRUE, matrix=FALSE)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "seqrep")
summary.regsubsets(CRECregsubsets,all.best=TRUE, matrix=FALSE)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "seqrep")
summary(CRECregsubsets,all.best=TRUE, matrix=FALSE)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, method = "exhaustive")
summary(CRECregsubsets,all.best=TRUE, matrix=FALSE)
# Regression
CRECEIVEregression <- lm(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, na.action = na.omit)
summary(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(Sample90to95C)
?? cor.test
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression, CRECEIVEresid)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEresid)
# Check that the variability in independent variable values is positive
var(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEresid)
# Check that the variability in independent variable values is positive
#var(CRECEIVEregression)
# Check for perfect multicollinearity among the variables
vif(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEresid)
# Check that the variability in independent variable values is positive
#var(CRECEIVEregression)
# Check for perfect multicollinearity among the variables
#vif(CRECEIVEregression)
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregression)
qqnorm(CRECEIVEregression, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for Regression Model Residuals - Version 1", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
View(CRECregsubsets)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression$GYEAR, CRECEIVEresid$residuals)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression$GENERAL, CRECEIVEregression$residuals)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression, CRECEIVEregression$residuals)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEregression$residuals)
# Check that the variability in independent variable values is positive
var(CRECEIVEregression$GENERAL)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEregression$residuals)
# Check that the variability in independent variable values is positive
var(Sample90to95C$GENERAL)
# Check for perfect multicollinearity among the variables
vif(CRECEIVEregression)
?? vif
install.packages("car")
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
libary(car) # companion to applied regression
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
#cor.test(CRECEIVEregression, CRECEIVEregression$residuals)
# Check that the variability in independent variable values is positive
var(Sample90to95C$GENERAL)
# Check for perfect multicollinearity among the variables
vif(CRECEIVEregression)
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregression)
dev.off()
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResiduals02.png"))
qqnorm(CRECEIVEresid, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for Regression Model Residuals - Version 2", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(CRECEIVEresid, col = "green", lwd = 2)
dev.off()
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression$GYEAR, CRECEIVEregression$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(CRECEIVEregression$GENERAL, CRECEIVEregression$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(Samplet90to95C$GENERAL, CRECEIVEregression$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
plot(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Check for homoscedasticity of residuals or equal variance
par(mfrow=c(2,2))
plot(CRECEIVEregression)
# Check for autocorrelation of residuals using Durbin-Watson test
dwtest(CRECEIVEregression)
# Check that the independent variables and the residuals are uncorrelated
cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
install.packages("aod")
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + RATIOCIT + BCKGTLAG + SELFCTLB + SECDLWBD, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
confint(logitCRECEIVE, level = 0.95)
View(Sample90to95B)
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B)
Sample90to95B %>%
select(-SELFCTUB, -SELFCTLB, -SECDUPBD, -SECDLWBD) %>%
distinct() -> Sample90to95B
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B)
Sample90to95B %>%
select(-c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B)
Sample90to95B <- select(Sample90to95B, -c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD))
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG)
Sample90to95B <- select(Sample90to95B, -c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD))
View(Sample90to95B)
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG)
Sample90to95B %>%
dplyr:select(-c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG)
Sample90to95B %>%
dplyr:select(-c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG)
Sample90to95B %>%
dplyr::select(-c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
miss_var_summary(Sample90to95B, order = TRUE)
miss_case_summary(Sample90to95B, order = TRUE)
get_dupes(Sample90to95B, PATENT)
get_dupes(Sample90to95B)
View(Sample90to95B)
?? max
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG, na.rm = TRUE)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG, na.rm = TRUE)
Sample90to95B %>%
dplyr::select(-c(SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
miss_var_summary(Sample90to95B, order = TRUE)
miss_case_summary(Sample90to95B, order = TRUE)
get_dupes(Sample90to95B, PATENT)
get_dupes(Sample90to95B)
View(Sample90to95B)
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG, na.rm = TRUE)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG, na.rm = TRUE)
Sample90to95B %>%
dplyr::select(-c(RATIOCIT, SELFCTUB, SELFCTLB, SECDUPBD, SECDLWBD)) %>%
distinct() -> Sample90to95B
miss_var_summary(Sample90to95B, order = TRUE)
miss_case_summary(Sample90to95B, order = TRUE)
get_dupes(Sample90to95B, PATENT)
get_dupes(Sample90to95B)
View(Sample90to95B)
