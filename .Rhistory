CRECEIVEordinal <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECEIVEordinal)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal))
tvalues <- summary(CRECEIVEordinal)$coefficients[, "t value"]
pvalues <- pt(abs(tvalues),df.residual(CRECEIVEordinal),lower.tail = FALSE)*2
coefsOrdinal <- cbind(coefsOrdinal, "p values" = round(pvalues, 5))
CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal)
CRECEIVEordinal <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECEIVEordinal)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal))
tvalues <- summary(CRECEIVEordinal)$coefficients[, "t value"]
pvalues <- pt(abs(tvalues),df.residual(CRECEIVEordinal),lower.tail = FALSE)*2
coefsOrdinal <- cbind(coefsOrdinal, "p values" = round(pvalues, 5))
summary(coefsOrdinal)
View(coefsOrdinal)
CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal)
CRECEIVEordinal01 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECEIVEordinal01)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal))
tvalues <- summary(CRECEIVEordinal01)$coefficients[, "t value"]
pvalues <- pt(abs(tvalues),df.residual(CRECEIVEordinal01),lower.tail = FALSE)*2
coefsOrdinal <- cbind(coefsOrdinal, "p values" = round(pvalues, 5))
summary(coefsOrdinal)
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for McFadden's Pseudo R2 for logistic regression
Sample90to95C %>%
mutate(CRECEIVEsqrt = sqrt(CRECEIVE)) -> Sample90to95C
png(filename = here("Results", "QQplotCRECEIVEsqrt.png"))
qqnorm(Sample90to95C$CRECEIVEsqrt, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CRECEIVEsqrt", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95C$CRECEIVEsqrt, col = "green", lwd = 2)
dev.off()
# Regression
CRECEIVEregressionTrfm <- lm(CRECEIVEsqrt ~ GYEAR + CAT02 + CAT03 + CAT04 + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG, data = Sample90to95C, na.action = na.omit)
summary(CRECEIVEregressionTrfm)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregressionTrfm$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregressionTrfm$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregressionTrfm$residuals)
summary(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregressionTrfm$residuals)
summary(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregressionTrfm$residuals)
summary(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
summary(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
VarRegression <- var(Sample90to95C)
summary(VarRegression)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregressionTrfm)
summary(VIFregression)
knitr::opts_knit$set(root.dir = here::here())
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for McFadden's Pseudo R2 for logistic regression
DataRaw <- read.table(here("DataRaw","NBERpatents1963to1999/apat63_99.txt"), sep = ",", header = TRUE, fill = TRUE, dec = ".")
DataRaw %>% # subset data
filter(GYEAR>=1990) %>%
filter(GYEAR<=1995) -> DataSubset90to95
DataSubset90to95 <- as_tibble(DataSubset90to95) # convert data frame to tibble
set.seed(1972)
Sample90to95 <- sample(1:nrow(DataSubset90to95), size = 2000, replace = TRUE, prob = NULL)
Sample90to95 <- DataSubset90to95[Sample90to95,]
Sample90to95 <- as_tibble(Sample90to95)
Sample90to95 %>%
dplyr::select(PATENT, GYEAR, CRECEIVE, CAT, CLAIMS, CMADE, GENERAL, ORIGINAL, FWDAPLAG, BCKGTLAG) -> Sample90to95A # Another package also has a `select()` function
miss_var_summary(Sample90to95A, order = TRUE)
miss_case_summary(Sample90to95A, order = TRUE)
get_dupes(Sample90to95A, PATENT)
get_dupes(Sample90to95A)
Sample90to95B <- Sample90to95A
Sample90to95B$GENERAL[is.na(x=Sample90to95B$GENERAL)] <- 0
Sample90to95B$ORIGINAL[is.na(x=Sample90to95B$ORIGINAL)] <- 1
Sample90to95B$FWDAPLAG[is.na(x=Sample90to95B$FWDAPLAG)] <- max(Sample90to95B$FWDAPLAG, na.rm = TRUE)
Sample90to95B$BCKGTLAG[is.na(x=Sample90to95B$BCKGTLAG)] <- max(Sample90to95B$BCKGTLAG, na.rm = TRUE)
Sample90to95B %>%
distinct() -> Sample90to95B
miss_var_summary(Sample90to95B, order = TRUE)
miss_case_summary(Sample90to95B, order = TRUE)
get_dupes(Sample90to95B, PATENT)
get_dupes(Sample90to95B)
summary(Sample90to95B)
histoGYEAR <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(GYEAR))
ggsave(here("results", "histogramGYEAR.png"), dpi = 300)
histoCRECEIVE <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(CRECEIVE))
ggsave(here("Results", "histogramCRECEIVE.png"), dpi = 300)
histoCAT <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(CAT))
ggsave(here("Results", "histogramCAT.png"), dpi = 300)
histoCLAIMS <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(CLAIMS))
ggsave(here("Results", "histogramCLAIMS.png"), dpi = 300)
histoCMADE <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(CMADE))
ggsave(here("Results", "histogramCMADE.png"), dpi = 300)
histoGENERAL <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(GENERAL))
ggsave(here("Results", "histogramGENERAL.png"), dpi = 300)
histoORIGINAL <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(ORIGINAL))
ggsave(here("Results", "histogramORIGINAL.png"), dpi = 300)
histoFWDAPLAG <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(FWDAPLAG))
ggsave(here("Results", "histogramFWDAPLAG.png"), dpi = 300)
histoBCKGTLAG <- ggplot() +
geom_histogram(Sample90to95B, mapping = aes(BCKGTLAG))
ggsave(here("Results", "histogramBCKGTLAG.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = GYEAR, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyGYEAR.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = CAT, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCAT.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = CLAIMS, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCLAIMS.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = CMADE, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyCMADE.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = GENERAL, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyGENERAL.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = ORIGINAL, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyORIGINAL.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = FWDAPLAG, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyFWDAPLAG.png"), dpi = 300)
ggplot() +
geom_point(Sample90to95B, mapping = aes(x = BCKGTLAG, y = CRECEIVE))
ggsave(here("results", "scatterCRECEIVEbyBCKGTLAG.png"), dpi = 300)
png(filename = here("Results", "QQplotGYEAR.png"))
qqnorm(Sample90to95B$GYEAR, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for GYEAR", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$GYEAR, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotCReceive.png"))
qqnorm(Sample90to95B$CRECEIVE, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CRECEIVE", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CRECEIVE, col = "green", lwd = 2, plot.it = TRUE)
dev.off()
png(filename = here("Results", "QQplotCLAIMS.png"))
qqnorm(Sample90to95B$CLAIMS, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CLAIMS", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CLAIMS, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotCMADE.png"))
qqnorm(Sample90to95B$CMADE, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CMADE", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CMADE, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotGENERAL.png"))
qqnorm(Sample90to95B$GENERAL, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for GENERAL", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$GENERAL, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotORIGINAL.png"))
qqnorm(Sample90to95B$ORIGINAL, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for ORIGINAL", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$ORIGINAL, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotFWDAPLAG.png"))
qqnorm(Sample90to95B$FWDAPLAG, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for FWDAPLAG", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$FWDAPLAG, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotBCKGTLAG.png"))
qqnorm(Sample90to95B$BCKGTLAG, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for BCKGTALG", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$BCKGTLAG, col = "green", lwd = 2)
dev.off()
Sample90to95corrmatrix <- cor(Sample90to95B)
Sample90to95B %>%
mutate(CRECbinary = ifelse(CRECEIVE == 0, 0, 1)) %>%
mutate(CAT01 = ifelse(CAT == 1, 1, 0)) %>%
mutate(CAT02 = ifelse(CAT == 2, 1, 0)) %>%
mutate(CAT03 = ifelse(CAT == 3, 1, 0)) %>%
mutate(CAT04 = ifelse(CAT == 4, 1, 0)) %>%
mutate(CAT05 = ifelse(CAT == 5, 1, 0)) %>%
mutate(CAT06 = ifelse(CAT == 6, 1, 0)) -> Sample90to95C
Sample90to95C %>%
group_by(GYEAR) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECEIVE) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECbinary) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT01) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT02) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT03) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT04) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT05) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT06) %>%
summarize(n())
Sample90to95C %>%
group_by(CLAIMS) %>%
summarize(n())
Sample90to95C %>%
group_by(CMADE) %>%
summarize(n())
Sample90to95C %>%
mutate(CRECordinal = ifelse (CRECEIVE>=15,15,CRECEIVE)) -> Sample90to95C
Sample90to95C <- as_tibble(Sample90to95C) # convert data frame to tibble
Sample90to95C %>%
group_by(GYEAR) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECEIVE) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECbinary) %>%
summarize(n())
Sample90to95C %>%
group_by(CRECordinal) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT01) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT02) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT03) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT04) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT05) %>%
summarize(n())
Sample90to95C %>%
group_by(CAT06) %>%
summarize(n())
Sample90to95C %>%
group_by(CLAIMS) %>%
summarize(n())
Sample90to95C %>%
group_by(CMADE) %>%
summarize(n())
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
exp(coefs)
# Obtain the McFadden pseudo R2
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
confint(logitCRECEIVE, level = 0.95)
CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal)
CRECEIVEordinal01 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
summary(CRECEIVEordinal01)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal))
tvalues <- summary(CRECEIVEordinal01)$coefficients[, "t value"]
pvalues <- pt(abs(tvalues),df.residual(CRECEIVEordinal01),lower.tail = FALSE)*2
coefsOrdinal <- cbind(coefsOrdinal, "p values" = round(pvalues, 5))
summary(coefsOrdinal)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, nbest = 2, method = "exhaustive")
summary(CRECregsubsets,all.best=TRUE, matrix=TRUE)
plot(CRECregsubsets, scale = "adjr2")
# Regression
CRECEIVEregression <- lm(CRECEIVE ~ GYEAR + CAT02 + CAT03 + CAT04 + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG, data = Sample90to95C, na.action = na.omit)
summary(CRECEIVEregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregression)
# Residuals
CRECEIVEresid <- residuals(CRECEIVEregression)
summary(CRECEIVEresid)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResiduals01.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregression)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregression)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregression$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95C$CAT, CRECEIVEregression$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95C$CLAIMS, CRECEIVEregression$residuals)
summary(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95C$ORIGINAL, CRECEIVEregression$residuals)
summary(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95C$GENERAL, CRECEIVEregression$residuals)
summary(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95C$FWDAPLAG, CRECEIVEregression$residuals)
summary(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
VarRegression <- var(Sample90to95C)
summary(VarRegression)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregression)
summary(VIFregression)
Sample90to95C %>%
filter(CRECEIVE >= 10) %>%
mutate(CRECEIVEsqrt = sqrt(CRECEIVE)) -> Sample90to95D
png(filename = here("Results", "QQplotCRECEIVEsqrt.png"))
qqnorm(Sample90to95D$CRECEIVEsqrt, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CRECEIVEsqrt", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95D$CRECEIVEsqrt, col = "green", lwd = 2)
dev.off()
# Regression
CRECEIVEregressionTrfm <- lm(CRECEIVEsqrt ~ GYEAR + CAT02 + CAT03 + CAT04 + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG, data = Sample90to95D, na.action = na.omit)
summary(CRECEIVEregressionTrfm)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95C$GYEAR, CRECEIVEregressionTrfm$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to9DC$CLAIMS, CRECEIVEregressionTrfm$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to9D$CLAIMS, CRECEIVEregressionTrfm$residuals)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95D$CLAIMS, CRECEIVEregressionTrfm$residuals)
summary(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95D$ORIGINAL, CRECEIVEregressionTrfm$residuals)
summary(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95D$GENERAL, CRECEIVEregressionTrfm$residuals)
summary(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95D$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
summary(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
VarRegression <- var(Sample90to95D)
summary(VarRegression)
# Check for perfect multicollinearity among the variables
VIFregression <- vif(CRECEIVEregressionTrfm)
summary(VIFregression)
?? print
# Global check of linear regression assumptions
print("Perform Global Check of Linear Regression Assumptions")
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
print("Residuals", quote = FALSE)
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
summary(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
print("Check for Autocorrelation of Residuals", quote = FALSE)
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
summary(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
print("Check for Correlation between Independent Variables and Residuals", quote = FALSE)
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
summary(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
summary(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95D$CLAIMS, CRECEIVEregressionTrfm$residuals)
summary(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95D$ORIGINAL, CRECEIVEregressionTrfm$residuals)
summary(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95D$GENERAL, CRECEIVEregressionTrfm$residuals)
summary(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95D$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
summary(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
print("Check for Positive Variablity of Independent Variable Values")
VarRegression <- var(Sample90to95D)
summary(VarRegression)
# Check for perfect multicollinearity among the variables
print("Check for Multicollinearity Among Variables")
VIFregression <- vif(CRECEIVEregressionTrfm)
summary(VIFregression)
