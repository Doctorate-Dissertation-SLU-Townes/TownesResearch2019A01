CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
print("Ordinal Logistic Regression Method 01", quote = FALSE)
summary(CRECEIVEordinal)
CRECEIVEordinal01 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
print("Ordinal Logistic Regression Method 02")
summary(CRECEIVEordinal01)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal01))
tvalues <- summary(CRECEIVEordinal01)$coefficients[, "t value"]
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal01$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (Normal)" = round(pval, 5))
print("Ordinal Logistic Regression - P-value Calculations")
print(coefsOrdinal01)
CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
print("Ordinal Logistic Regression Method 01", quote = FALSE)
summary(CRECEIVEordinal)
CRECEIVEordinal01 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
print("Ordinal Logistic Regression Method 02")
summary(CRECEIVEordinal01)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal01))
tvalues <- summary(CRECEIVEordinal01)$coefficients[, "t value"]
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal01$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal01, "p values (Normal)" = round(pval, 5))
print("Ordinal Logistic Regression with P-values")
print(coefsOrdinal01)
CRECEIVEordinal <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C)
print("Ordinal Logistic Regression Method 01", quote = FALSE)
summary(CRECEIVEordinal)
CRECEIVEordinal01 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, Hess = TRUE, model = TRUE, method = "logistic")
print("Ordinal Logistic Regression Method 02")
summary(CRECEIVEordinal01)
coefsOrdinal <- coefficients(summary(CRECEIVEordinal01))
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal01$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal01, "p values (Normal)" = round(pval, 5))
print("Ordinal Logistic Regression with P-values")
print(coefsOrdinal01)
install.packages("ResourceSelection")
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for McFadden's Pseudo R2 for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemdshow goodness of fit test
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE))
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
hoslem.test(as.numeric(logitCRECEIVE$CRECbinary), fitted(logitCRECEIVE), g=10)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- ResourceSelection::hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
Sample90to95E <- Sample90to95C[complete.cases(Sample90to95C),]
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95E, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
Sample90to95E <- complete.cases(Sample90to95C)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95E, family = binomial, na.action = na.omit)
Sample90to95C %>%
complete.cases() %>%
as_tibble() -> Sample90to95E
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95E, family = binomial, na.action = na.omit)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
View(Sample90to95C)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(as_numeric(logitCRECEIVE$CRECbinary), fitted(as_numeric(logitCRECEIVE)), g=10)
View(Sample90to95C)
View(Sample90to95E)
logitCRECEIVE <- glm(CRECbinary ~ as_numeric(GYEAR) + as_numeric(as.factor(CAT)) + as_numeric(CMADE) + as_numeric(CLAIMS) + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
logitCRECEIVE <- glm(CRECbinary ~ as.numeric(GYEAR) + as.numeric(as.factor(CAT)) + as.numeric(CMADE) + as.numeric(CLAIMS) + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(as_numeric(logitCRECEIVE$CRECbinary), fitted(as_numeric(logitCRECEIVE)), g=10)
logitCRECEIVE <- glm(CRECbinary ~ as.numeric(GYEAR) + as.numeric(as.factor(CAT)) + as.numeric(CMADE) + as.numeric(CLAIMS) + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fittedlogitCRECEIVE, g=10)
logitCRECEIVE <- glm(CRECbinary ~ as.numeric(GYEAR) + as.numeric(as.factor(CAT)) + as.numeric(CMADE) + as.numeric(CLAIMS) + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10)
logitCRECEIVE <- glm(CRECbinary ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, family = binomial, na.action = na.omit)
summary(logitCRECEIVE)
coefs <- coef(logitCRECEIVE)
# Raise e to the coefficients
print("Raise e to the Coefficients", quote = FALSE)
exp(coefs)
# Obtain the McFadden pseudo R2
print("Obtain the McFadden Pseudo R-squared", quote = FALSE)
pR2(logitCRECEIVE)
# Confidence intervals for the coefficients
print("Confidence Intervals for the Coefficients", quote = FALSE)
confint(logitCRECEIVE, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
print("Hosemer-Lemeshow Goodness of Fit Test", quote = FALSE)
GOF <- hoslem.test(logitCRECEIVE$CRECbinary, fitted(logitCRECEIVE), g=10, data = Sample90to95C)
warning()
warnings
write.csv(Sample90to95C, here("Data","DataClean","NBERpatents1963to1999","NBERPatCit90to95SampleC.csv"), append = FALSE)
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for McFadden's Pseudo R2 for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemdshow goodness of fit test
write.csv(Sample90to95C, here("Data","DataClean","NBERpatents1963to1999","NBERPatCit90to95SampleC.csv"), append = FALSE)
print("Correlation Coefficients", quote = FALSE)
Sample90to95corrmatrix <- cor(Sample90to95B)
summary(Sample90to95Acorrmatrix)
print("Correlation Coefficients", quote = FALSE)
Sample90to95corrmatrix <- cor(Sample90to95B)
summary(Sample90to95corrmatrix)
View(Sample90to95Acorrmatrix)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
print(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95D$CLAIMS, CRECEIVEregressionTrfm$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95D$ORIGINAL, CRECEIVEregressionTrfm$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95D$GENERAL, CRECEIVEregressionTrfm$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95D$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
VarRegression <- var(Sample90to95D)
print(VarRegression)
# Check for perfect multicollinearity among the variables
print("Check for Multicollinearity Among Variables", quote = FALSE)
VIFregression <- vif(CRECEIVEregressionTrfm)
print(VIFregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
plot(CRECEIVEresidTrfm)
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
print(CorrGYEAR)
CorrCAT <- cor.test(Sample90to95D$CAT, CRECEIVEregressionTrfm$residuals)
print(CorrCAT)
CorrCLAIMS <- cor.test(Sample90to95D$CLAIMS, CRECEIVEregressionTrfm$residuals)
print(CorrCLAIMS)
CorrORIGINAL <- cor.test(Sample90to95D$ORIGINAL, CRECEIVEregressionTrfm$residuals)
print(CorrORIGINAL)
CorrGENERAL <- cor.test(Sample90to95D$GENERAL, CRECEIVEregressionTrfm$residuals)
print(CorrGENERAL)
CorrFWDAPLAG <- cor.test(Sample90to95D$FWDAPLAG, CRECEIVEregressionTrfm$residuals)
print(CorrFWDAPLAG)
# Check that the variability in independent variable values is positive
VarRegression <- var(Sample90to95D)
print(VarRegression)
# Check for perfect multicollinearity among the variables
print("Check for Multicollinearity Among Variables", quote = FALSE)
VIFregression <- vif(CRECEIVEregressionTrfm)
print(VIFregression)
# Global check of linear regression assumptions
par(mfrow=c(2,2))
gvlma(CRECEIVEregressionTrfm)
# Residuals
CRECEIVEresidTrfm <- residuals(CRECEIVEregressionTrfm)
png(filename = here("Results","MultRegressPlotResidualsTrfm.png"))
plot(CRECEIVEresidTrfm)
dev.off()
# Check for homoscedasticity of residuals or equal variance
# Check for normality of residuals
png(filename = here("Results", "MultRegresQQplotModelResidualsTrfm.png"))
par(mfrow=c(2,2))
plot(CRECEIVEregressionTrfm)
dev.off()
# Check for autocorrelation of residuals using Durbin-Watson test
AutoCorr <- dwtest(CRECEIVEregressionTrfm)
print(AutoCorr)
# Check that the independent variables and the residuals are uncorrelated
CorrGYEAR <- cor.test(Sample90to95D$GYEAR, CRECEIVEregressionTrfm$residuals)
plot(CorrGYEAR)
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, nbest = 2, method = "exhaustive")
summary(CRECregsubsets,all.best=FALSE, matrix=TRUE)
plot(CRECregsubsets, scale = "adjr2")
?? omnibus
CRECregsubsets <- regsubsets(CRECEIVE ~ GYEAR + as.factor(CAT) + CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG + BCKGTLAG, data = Sample90to95C, nbest = 2, method = "exhaustive")
summary(CRECregsubsets,matrix=TRUE)
plot(CRECregsubsets, scale = "adjr2")
View(Sample90to95C)
library(tidyverse) # loads the basic R packages
library(here) # enables file portability
library(readr) # functions for reading data
library(dplyr) # functions for data wrangling
library(janitor) # functions for data cleaning
library(naniar) # functions for analyzing missing data
library(ggplot2) # functions for data visualizations
library(boot) # functions for regression analysis
library(ordinal) # functions for regression models for ordinal data
library(MASS) # functions for ordered logistic or probit regression
library(broom) # functions for tidying ordinal logistic regression models
library(gvlma) # functions for global validation of linear model assumptions
library(lmtest) # functions for testing linear regression models
library(leaps) # functions for regression subset selection
library(car) # companion to applied regression
library(aod) # functions to analyze overdispersed data counts and proportions
library(pscl) # contains function for McFadden's Pseudo R2 for logistic regression
library(ResourceSelection) # contains function for Hosmer-Lemdshow goodness of fit test
png(filename = here("Results", "QQplotGYEAR.png"))
qqnorm(Sample90to95B$GYEAR, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for GYEAR", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$GYEAR, col = "green", lwd = 2)
dev.off()
ggplot()+
geom_point(Sample90to95B, mapping = aes(sample = GYEAR))+
stat_qq()+
stat_qq_line()
png(filename = here("Results", "QQplotGYEAR.png"))
qqnorm(Sample90to95B$GYEAR, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for GYEAR", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$GYEAR, col = "green", lwd = 2)
dev.off()
ggplot(Sample90to95B)+
aes(sample = GYEAR)+
stat_qq()+
stat_qq_line()
ggsave(here("Results", "QQplotGYEAR.png"))
png(filename = here("Results", "QQplotCReceive.png"))
qqnorm(Sample90to95B$CRECEIVE, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CRECEIVE", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CRECEIVE, col = "green", lwd = 2, plot.it = TRUE)
dev.off()
png(filename = here("Results", "QQplotCLAIMS.png"))
qqnorm(Sample90to95B$CLAIMS, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CLAIMS", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CLAIMS, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotCMADE.png"))
qqnorm(Sample90to95B$CMADE, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for CMADE", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$CMADE, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotGENERAL.png"))
qqnorm(Sample90to95B$GENERAL, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for GENERAL", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$GENERAL, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotORIGINAL.png"))
qqnorm(Sample90to95B$ORIGINAL, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for ORIGINAL", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$ORIGINAL, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotFWDAPLAG.png"))
qqnorm(Sample90to95B$FWDAPLAG, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for FWDAPLAG", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$FWDAPLAG, col = "green", lwd = 2)
dev.off()
png(filename = here("Results", "QQplotBCKGTLAG.png"))
qqnorm(Sample90to95B$BCKGTLAG, pch = 1, frame = FALSE,
main = "Normal Q-Q Plot for BCKGTALG", xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qqline(Sample90to95B$BCKGTLAG, col = "green", lwd = 2)
dev.off()
# Ordinal Logistic Regression Results - Method 01
CRECEIVEordinal01 <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) +
CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG +
BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal01)
# Ordinal Logistic Regression Results - Method 02
CRECEIVEordinal02 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) +
CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG +
BCKGTLAG, data = Sample90to95C, Hess = TRUE,
model = TRUE, method = "logistic")
summary(CRECEIVEordinal02)
# Calculate P-Values for Coefficients
coefsOrdinal <- coefficients(summary(CRECEIVEordinal02))
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal02$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal01, "p values (Normal)" = round(pval, 5))
print("Ordinal Logistic Regression Results with P-values")
summary(coefsOrdinal01)
# Raise e to the coefficients
exp(coef(CRECEIVEordinal02))
# Obtain the McFadden pseudo R-squared
pR2(CRECEIVEordinal02)
# Confidence intervals for the coefficients
confint(CRECEIVEordinal02, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
HosLemOrdinal <- hoslem.test(Sample90to95C$CRECordinal,
fitted(CRECEIVEordinal01), g=10)
summary(HosLemOrdinal)
cbind(HosLemOrdinal$expected, HosLemOrdinal$observed)
# Ordinal Logistic Regression Results - Method 01
CRECEIVEordinal01 <- clm(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) +
CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG +
BCKGTLAG, data = Sample90to95C)
summary(CRECEIVEordinal01)
# Ordinal Logistic Regression Results - Method 02
CRECEIVEordinal02 <- polr(as.factor(CRECordinal) ~ GYEAR + as.factor(CAT) +
CMADE + CLAIMS + ORIGINAL + GENERAL + FWDAPLAG +
BCKGTLAG, data = Sample90to95C, Hess = TRUE,
model = TRUE, method = "logistic")
summary(CRECEIVEordinal02)
# Calculate P-Values for Coefficients
coefsOrdinal <- coefficients(summary(CRECEIVEordinal02))
pvalues <- pt(abs(coefsOrdinal)[,"t value"], df=CRECEIVEordinal02$df,lower.tail = FALSE)*2
pval <- pnorm(abs(coefsOrdinal)[,"t value"],lower.tail = FALSE)*2
coefsOrdinal01 <- cbind(coefsOrdinal, "p values (t dist)" = round(pvalues, 5))
coefsOrdinal01 <- cbind(coefsOrdinal01, "p values (Normal)" = round(pval, 5))
print("Ordinal Logistic Regression Results with P-values")
summary(coefsOrdinal01)
# Raise e to the coefficients
exp(coef(CRECEIVEordinal01))
# Obtain the McFadden pseudo R-squared
pR2(CRECEIVEordinal02)
# Confidence intervals for the coefficients
confint(CRECEIVEordinal01, level = 0.95)
# Hosemer-Lemeshow Goodness of Fit Test
HosLemOrdinal <- hoslem.test(Sample90to95C$CRECordinal,
fitted(CRECEIVEordinal01), g=10)
summary(HosLemOrdinal)
cbind(HosLemOrdinal$expected, HosLemOrdinal$observed)
Sample90to95corrmatrix <- cor(Sample90to95B)
print(Sample90to95corrmatrix)
